You have given the array
arr={0,1,2,1,2,0,1}.
We have to sort the array.

Approach1->
Arrays.sort(arr)
Print
Time complexity->O(nlog(n)).

Approch2-> 
Count 0, 1,2 in the array. And in the same array fill it. Time complexity O(n).

        int z=0;
        int o=0;
        int t=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==0)
            {
                z++;
            }
            else if(arr[i]==1)
            {
                o++;
            }
            else
            {
                t++;
            }
        }
        int i=0;
        while(z!=0)
        {
            arr[i]=0;
            i++;
            z--;
        }
        
        while(o!=0)
        {
            arr[i]=1;
            i++;
            o--;
        }
        while(t!=0)
        {
            arr[i]=2;
            i++;
            t--;
        }
        for(int j=0;j<arr.length;j++)
        {
            System.out.println(arr[j]);
        }
        
        
Approch 3-> using 3 variables.


low,mid,high.
Low and midimum will point to first element.
high points to last element.
low will indicates that the element before the low pointer are all zero and high will indicates that the value after the high is all 2.

Suppose there are 3 colours. And we have to seperate all the 3 colour. So we can do that if it is red put it on left. If it is green put it on right 
and if it is blue put in same. And in the end we seperate all the 3 colours.

Code-> 
public class HelloWorld{

     public static void main(String []args){          l
        int[] arr={0,1,2,1,2,0,1};                    0 1 2 1 2 0 1
                                                      m           h
        int l=0,m=0,h=arr.length-1;
        while(m<=h)
        {
            if(arr[m]==0)     // put it on left. and increase l,m
            {
                int temp=arr[m];
                arr[m]=arr[l];
                arr[l]=temp;
                m++;
                l++;
            }
            else if(arr[m]==1)    // leave just increment m++
            {
                m++;
            }
            else        // put it on right and decrement h. But not increment m as we dont know after the swap what we get.
            {
                int temp=arr[m];
                arr[m]=arr[h];
                arr[h]=temp;
                h--;
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.println(arr[i]);
        }
    }
}
