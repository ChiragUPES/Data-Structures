Input :  arr[] = {1, 2, 0, 4, 3, 0, 5, 0};
Output : arr[] = {1, 2, 4, 3, 5, 0, 0};

Input : arr[]  = {1, 2, 0, 0, 0, 3, 6};
Output : arr[] = {1, 2, 3, 6, 0, 0, 0};

My approach->

import java.util.*;
public class HelloWorld{

     public static void main(String []args){
        int[] arr={1, 2, 0, 4, 3, 0, 5, 0};
        int[] res=new int[arr.length];
        int countzero=0;
        for(int i=0,j=0;i<arr.length;i++)
        {
            if(arr[i]!=0)
            {
                res[j]=arr[i];
                j++;
            }else
            {
                countzero++;
            }
        }
        for(int i=res.length-countzero;i<res.length;i++)
        {
            res[i]=0;
        }
        for(int i=0;i<res.length;i++)
        {
            System.out.println(res[i]);
        }
     }
}
But it is-> Time -> O(n)
             Space-> O(n)
             
Approach 2-> 

Next approach is basically not taking the result array. If zero if found that than simple shift back to that element. And maintain the count of zero. And in the end
add zero to the last.


import java.util.*;
public class HelloWorld{

     public static void main(String []args){
        int[] arr={1,6,0,3,8,9,0,2};
        int countzero=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]>0)
            {
                arr[countzero]=arr[i];
                countzero++;
            }
        }
        while(countzero<arr.length)
        {
            arr[countzero]=0;
            countzero++;
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.println(arr[i]);
        }
     }
}




