Nmuber will be given. Suppose 2 1 4 5 3. So we have to find the inverse of the number.
index->   5 4 3 2 1            
nmbr->    2 1 4 5 3 

Inverse :
index    5 4 3 2 1
ans:     2 3 1 5 4
Sometimes it would be same as the number. For example:
index->  4 3 2 1
Number-> 2 1 4 3

Inverse:
index-> 4 3 2 1
nmbr->  2 1 4 3.

Algo:
Nmuber-> 2  1 4 5 3             |         Inverse
        Position      Digit     | Position      Digit = Digit*10^(Position-1)
          1             3       |    1            4   = 4*10^(1-1)
          2             5       |    2            5   = 5*10(2-1)
          3             4       |    3            1   = 1*10(3-1)
          4             1       |    4            3   
          5             2       |    5            2
In inverse position will become digit and digit will become the position.

        21453%10-> digit which is at first position. So, here we get 3 at the first position now i have to make it as on the third position we get 1.
        So, if i want to add 1 on third digit than i have to add 100 in the inverse value.
        n=n/10. We want the digit which is at second index.
        2145%10->  we get 5 at second position. So we have to add 2 at 5th position which means we have to add 20000 in the number(i.e 2*10^4).
        n=n/10.
        214%10-> 4. Now we get 4 at 3rd position. So we have to add 3 at 4th position.So add 3000(i.e 3*10^3)
        n=n/10.
        21%10-> 1. Now we get 1 at 4th position. So we have to add 4 in first position. means(4*10^0).
        2%10->2. We get 2 at 5th position.Now we have to add 5 at 2nd position. (5*10^1).
        
  Code:
import java.util.Scanner;
public class HelloWorld{

     public static void main(String []args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int inv=0;      // ans
        int op=1;     // maintian the position of digit(original position)
        while(n!=0)
        { 
            int od=n%10;    // value at position(original digit)
            int ip=od;      // inverse position=original digit
            int id=op;      // inverse digit=original place
            // Make change to inverse using ip and and id
            inv=inv+ (id*(int)Math.pow(10,ip-1));
            
            n=n/10;     // samll the number
            op++;   // increment the position
        }
        System.out.println(inv);
     }
}
        
